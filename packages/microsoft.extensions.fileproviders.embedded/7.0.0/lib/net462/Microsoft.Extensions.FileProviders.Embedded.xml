<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Extensions.FileProviders.Embedded</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Extensions.FileProviders.EmbeddedFileProvider">
            <summary>
            Looks up files using embedded resources in the specified assembly.
            This file provider is case sensitive.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.FileProviders.EmbeddedFileProvider.#ctor(System.Reflection.Assembly)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Extensions.FileProviders.EmbeddedFileProvider" /> class using the specified
            assembly with the base namespace defaulting to the assembly name.
            </summary>
            <param name="assembly">The assembly that contains the embedded resources.</param>
        </member>
        <member name="M:Microsoft.Extensions.FileProviders.EmbeddedFileProvider.#ctor(System.Reflection.Assembly,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Extensions.FileProviders.EmbeddedFileProvider" /> class using the specified
            assembly and base namespace.
            </summary>
            <param name="assembly">The assembly that contains the embedded resources.</param>
            <param name="baseNamespace">The base namespace that contains the embedded resources.</param>
        </member>
        <member name="M:Microsoft.Extensions.FileProviders.EmbeddedFileProvider.GetFileInfo(System.String)">
            <summary>
            Locates a file at the given path.
            </summary>
            <param name="subpath">The path that identifies the file. </param>
            <returns>
            The file information. Caller must check Exists property. A <see cref="T:Microsoft.Extensions.FileProviders.NotFoundFileInfo" /> if the file could
            not be found.
            </returns>
        </member>
        <member name="M:Microsoft.Extensions.FileProviders.EmbeddedFileProvider.GetDirectoryContents(System.String)">
            <summary>
            Enumerate a directory at the given path, if any.
            This file provider uses a flat directory structure. Everything under the base namespace is considered to be one
            directory.
            </summary>
            <param name="subpath">The path that identifies the directory</param>
            <returns>
            Contents of the directory. Caller must check Exists property. A <see cref="T:Microsoft.Extensions.FileProviders.NotFoundDirectoryContents" /> if no
            resources were found that match <paramref name="subpath" />
            </returns>
        </member>
        <member name="M:Microsoft.Extensions.FileProviders.EmbeddedFileProvider.Watch(System.String)">
            <summary>
            Embedded files do not change.
            </summary>
            <param name="pattern">This parameter is ignored</param>
            <returns>A <see cref="T:Microsoft.Extensions.FileProviders.NullChangeToken" /></returns>
        </member>
        <member name="T:Microsoft.Extensions.FileProviders.Embedded.EmbeddedResourceFileInfo">
            <summary>
            Represents a file embedded in an assembly.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.FileProviders.Embedded.EmbeddedResourceFileInfo.#ctor(System.Reflection.Assembly,System.String,System.String,System.DateTimeOffset)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Extensions.FileProviders.EmbeddedFileProvider"/> for an assembly using <paramref name="resourcePath"/> as the base
            </summary>
            <param name="assembly">The assembly that contains the embedded resource</param>
            <param name="resourcePath">The path to the embedded resource</param>
            <param name="name">An arbitrary name for this instance</param>
            <param name="lastModified">The <see cref="T:System.DateTimeOffset" /> to use for <see cref="P:Microsoft.Extensions.FileProviders.Embedded.EmbeddedResourceFileInfo.LastModified" /></param>
        </member>
        <member name="P:Microsoft.Extensions.FileProviders.Embedded.EmbeddedResourceFileInfo.Exists">
            <summary>
            Always true.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.FileProviders.Embedded.EmbeddedResourceFileInfo.Length">
            <summary>
            The length, in bytes, of the embedded resource
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.FileProviders.Embedded.EmbeddedResourceFileInfo.PhysicalPath">
            <summary>
            Always null.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.FileProviders.Embedded.EmbeddedResourceFileInfo.Name">
            <summary>
            The name of embedded file
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.FileProviders.Embedded.EmbeddedResourceFileInfo.LastModified">
            <summary>
            The time, in UTC, when the <see cref="T:Microsoft.Extensions.FileProviders.EmbeddedFileProvider"/> was created
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.FileProviders.Embedded.EmbeddedResourceFileInfo.IsDirectory">
            <summary>
            Always false.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.FileProviders.Embedded.EmbeddedResourceFileInfo.CreateReadStream">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.Extensions.FileProviders.ManifestEmbeddedFileProvider">
            <summary>
            An embedded file provider that uses a manifest compiled in the assembly to
            reconstruct the original paths of the embedded files when they were embedded
            into the assembly.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.FileProviders.ManifestEmbeddedFileProvider.#ctor(System.Reflection.Assembly)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Extensions.FileProviders.ManifestEmbeddedFileProvider"/>.
            </summary>
            <param name="assembly">The assembly containing the embedded files.</param>
        </member>
        <member name="M:Microsoft.Extensions.FileProviders.ManifestEmbeddedFileProvider.#ctor(System.Reflection.Assembly,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Extensions.FileProviders.ManifestEmbeddedFileProvider"/>.
            </summary>
            <param name="assembly">The assembly containing the embedded files.</param>
            <param name="root">The relative path from the root of the manifest to use as root for the provider.</param>
        </member>
        <member name="M:Microsoft.Extensions.FileProviders.ManifestEmbeddedFileProvider.#ctor(System.Reflection.Assembly,System.String,System.DateTimeOffset)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Extensions.FileProviders.ManifestEmbeddedFileProvider"/>.
            </summary>
            <param name="assembly">The assembly containing the embedded files.</param>
            <param name="root">The relative path from the root of the manifest to use as root for the provider.</param>
            <param name="lastModified">The LastModified date to use on the <see cref="T:Microsoft.Extensions.FileProviders.IFileInfo"/> instances
            returned by this <see cref="T:Microsoft.Extensions.FileProviders.IFileProvider"/>.</param>
        </member>
        <member name="M:Microsoft.Extensions.FileProviders.ManifestEmbeddedFileProvider.#ctor(System.Reflection.Assembly,System.String,System.String,System.DateTimeOffset)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Extensions.FileProviders.ManifestEmbeddedFileProvider"/>.
            </summary>
            <param name="assembly">The assembly containing the embedded files.</param>
            <param name="root">The relative path from the root of the manifest to use as root for the provider.</param>
            <param name="manifestName">The name of the embedded resource containing the manifest.</param>
            <param name="lastModified">The LastModified date to use on the <see cref="T:Microsoft.Extensions.FileProviders.IFileInfo"/> instances
            returned by this <see cref="T:Microsoft.Extensions.FileProviders.IFileProvider"/>.</param>
        </member>
        <member name="P:Microsoft.Extensions.FileProviders.ManifestEmbeddedFileProvider.Assembly">
            <summary>
            Gets the <see cref="P:Microsoft.Extensions.FileProviders.ManifestEmbeddedFileProvider.Assembly"/> for this provider.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.FileProviders.ManifestEmbeddedFileProvider.GetDirectoryContents(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Extensions.FileProviders.ManifestEmbeddedFileProvider.GetFileInfo(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Extensions.FileProviders.ManifestEmbeddedFileProvider.Watch(System.String)">
            <inheritdoc />
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>Specifies that null is allowed as an input even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>Specifies that null is disallowed as an input even if the corresponding type allows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>Specifies that an output may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>Specifies that an output will not be null even if the corresponding type allows it. Specifies that an input argument was not null when the call returns.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue"/>, the parameter may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter may be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>, the parameter will not be null even if the corresponding type allows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>Specifies that the output will be non-null if the named parameter is non-null.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with the associated parameter name.</summary>
            <param name="parameterName">
            The associated parameter name.  The output will be non-null if the argument to the parameter specified is non-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>Gets the associated parameter name.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>Applied to a method that will never return under any circumstance.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>Specifies that the method will not return if the associated Boolean parameter is passed the specified value.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified parameter value.</summary>
            <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable by diagnostics if the argument to
            the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>Gets the condition parameter value.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with a field or property member.</summary>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>Initializes the attribute with the list of field and property members.</summary>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values when returning with the specified return value condition.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>Initializes the attribute with the specified return value condition and a field or property member.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>Initializes the attribute with the specified return value condition and list of field and property members.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
    </members>
</doc>
