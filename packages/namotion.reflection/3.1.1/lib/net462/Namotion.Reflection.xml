<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Namotion.Reflection</name>
    </assembly>
    <members>
        <member name="T:Namotion.Reflection.AttributeExtensions">
            <summary>
            Provides attribute extensions.
            </summary>
        </member>
        <member name="M:Namotion.Reflection.AttributeExtensions.GetContextOrTypeAttribute``1(Namotion.Reflection.ContextualType,System.Boolean)">
            <summary>
            Gets an attribute of the given type which is defined on the context or on the type.
            </summary>
            <typeparam name="T">The attribute type.</typeparam>
            <returns>The attribute or null.</returns>
        </member>
        <member name="M:Namotion.Reflection.AttributeExtensions.GetContextOrTypeAttributes``1(Namotion.Reflection.ContextualType,System.Boolean)">
            <summary>
            Gets the attributes of the given type which are defined on the context or on the type.
            </summary>
            <typeparam name="T">The attribute type.</typeparam>
            <returns>The attributes.</returns>
        </member>
        <member name="M:Namotion.Reflection.AttributeExtensions.GetContextOrTypeAttributes(Namotion.Reflection.ContextualType,System.Boolean)">
            <summary>
            Gets the attributes of the given type which are defined on the context or on the type.
            </summary>
            <typeparam name="T">The attribute type.</typeparam>
            <returns>The attributes.</returns>
        </member>
        <member name="M:Namotion.Reflection.AttributeExtensions.GetContextAttribute``1(Namotion.Reflection.ContextualType,System.Boolean)">
            <summary>
            Gets an attribute of the given type which is defined on the context or on the type.
            </summary>
            <typeparam name="T">The attribute type.</typeparam>
            <returns>The attribute or null.</returns>
        </member>
        <member name="M:Namotion.Reflection.AttributeExtensions.GetContextAttributes``1(Namotion.Reflection.ContextualType,System.Boolean)">
            <summary>
            Gets the attributes of the given type which are defined on the context or on the type.
            </summary>
            <typeparam name="T">The attribute type.</typeparam>
            <returns>The attributes.</returns>
        </member>
        <member name="M:Namotion.Reflection.AttributeExtensions.GetContextAttributes(Namotion.Reflection.ContextualType,System.Boolean)">
            <summary>
            Gets the attributes of the given type which are defined on the context or on the type.
            </summary>
            <typeparam name="T">The attribute type.</typeparam>
            <returns>The attributes.</returns>
        </member>
        <member name="M:Namotion.Reflection.AttributeExtensions.IsContextAttributeDefined``1(Namotion.Reflection.ContextualType,System.Boolean)">
            <summary>
            Gets the attributes of the given type which are defined on the context or on the type.
            </summary>
            <typeparam name="T">The attribute type.</typeparam>
            <returns>The attributes.</returns>
        </member>
        <member name="M:Namotion.Reflection.AttributeExtensions.GetAttribute``1(Namotion.Reflection.ContextualMemberInfo,System.Boolean)">
            <summary>
            Gets an attribute of the given type which is defined on the context or on the type.
            </summary>
            <typeparam name="T">The attribute type.</typeparam>
            <returns>The attribute or null.</returns>
        </member>
        <member name="M:Namotion.Reflection.AttributeExtensions.GetAttributes``1(Namotion.Reflection.ContextualMemberInfo,System.Boolean)">
            <summary>
            Gets the attributes of the given type which are defined on the context or on the type.
            </summary>
            <typeparam name="T">The attribute type.</typeparam>
            <returns>The attributes.</returns>
        </member>
        <member name="M:Namotion.Reflection.AttributeExtensions.GetAttributes(Namotion.Reflection.ContextualMemberInfo,System.Boolean)">
            <summary>
            Gets the attributes of the given type which are defined on the context or on the type.
            </summary>
            <typeparam name="T">The attribute type.</typeparam>
            <returns>The attributes.</returns>
        </member>
        <member name="M:Namotion.Reflection.AttributeExtensions.IsAttributeDefined``1(Namotion.Reflection.ContextualMemberInfo,System.Boolean)">
            <summary>
            Gets the attributes of the given type which are defined on the context or on the type.
            </summary>
            <typeparam name="T">The attribute type.</typeparam>
            <returns>The attributes.</returns>
        </member>
        <member name="M:Namotion.Reflection.AttributeExtensions.GetAttribute``1(Namotion.Reflection.ContextualParameterInfo,System.Boolean)">
            <summary>
            Gets an attribute of the given type which is defined on the context or on the type.
            </summary>
            <typeparam name="T">The attribute type.</typeparam>
            <returns>The attribute or null.</returns>
        </member>
        <member name="M:Namotion.Reflection.AttributeExtensions.GetAttributes``1(Namotion.Reflection.ContextualParameterInfo,System.Boolean)">
            <summary>
            Gets the attributes of the given type which are defined on the context or on the type.
            </summary>
            <typeparam name="T">The attribute type.</typeparam>
            <returns>The attributes.</returns>
        </member>
        <member name="M:Namotion.Reflection.AttributeExtensions.GetAttributes(Namotion.Reflection.ContextualParameterInfo,System.Boolean)">
            <summary>
            Gets the attributes of the given type which are defined on the context or on the type.
            </summary>
            <typeparam name="T">The attribute type.</typeparam>
            <returns>The attributes.</returns>
        </member>
        <member name="M:Namotion.Reflection.AttributeExtensions.IsAttributeDefined``1(Namotion.Reflection.ContextualParameterInfo,System.Boolean)">
            <summary>
            Gets the attributes of the given type which are defined on the context or on the type.
            </summary>
            <typeparam name="T">The attribute type.</typeparam>
            <returns>The attributes.</returns>
        </member>
        <member name="M:Namotion.Reflection.AttributeExtensions.GetAttribute``1(Namotion.Reflection.CachedType,System.Boolean)">
            <summary>
            Gets an attribute of the given type which is defined on the context or on the type.
            </summary>
            <typeparam name="T">The attribute type.</typeparam>
            <returns>The attribute or null.</returns>
        </member>
        <member name="M:Namotion.Reflection.AttributeExtensions.GetAttributes``1(Namotion.Reflection.CachedType,System.Boolean)">
            <summary>
            Gets the attributes of the given type which are defined on the context or on the type.
            </summary>
            <typeparam name="T">The attribute type.</typeparam>
            <returns>The attributes.</returns>
        </member>
        <member name="M:Namotion.Reflection.AttributeExtensions.GetAttributes(Namotion.Reflection.CachedType,System.Boolean)">
            <summary>
            Gets the attributes of the given type which are defined on the context or on the type.
            </summary>
            <typeparam name="T">The attribute type.</typeparam>
            <returns>The attributes.</returns>
        </member>
        <member name="M:Namotion.Reflection.AttributeExtensions.IsAttributeDefined``1(Namotion.Reflection.CachedType,System.Boolean)">
            <summary>
            Gets the attributes of the given type which are defined on the context or on the type.
            </summary>
            <typeparam name="T">The attribute type.</typeparam>
            <returns>The attributes.</returns>
        </member>
        <member name="T:Namotion.Reflection.CachedType">
            <summary>
            A cached type object without context.
            </summary>
        </member>
        <member name="M:Namotion.Reflection.CachedType.ClearCache">
            <summary>
            Clears the cache.
            </summary>
        </member>
        <member name="F:Namotion.Reflection.CachedType._genericArguments">
            <summary>
            Internal generic arguments.
            </summary>
        </member>
        <member name="F:Namotion.Reflection.CachedType._originalGenericArguments">
            <summary>
            Internal original generic arguments.
            </summary>
        </member>
        <member name="F:Namotion.Reflection.CachedType._elementType">
            <summary>
            Internal element type.
            </summary>
        </member>
        <member name="M:Namotion.Reflection.CachedType.op_Implicit(Namotion.Reflection.CachedType)~System.Type">
            <summary>
            Unwraps the OriginalType as <see cref="P:Namotion.Reflection.CachedType.Type"/> from the context type.
            </summary>
            <param name="type">The contextual type</param>
        </member>
        <member name="P:Namotion.Reflection.CachedType.OriginalType">
            <summary>
            Gets the original type (i.e. without unwrapping Nullable{T}).
            </summary>
        </member>
        <member name="P:Namotion.Reflection.CachedType.Name">
            <summary>
            Gets the type name.
            </summary>
        </member>
        <member name="P:Namotion.Reflection.CachedType.TypeInfo">
            <summary>
            Gest the original's type info.
            </summary>
        </member>
        <member name="P:Namotion.Reflection.CachedType.Type">
            <summary>
            Gets the actual unwrapped type (e.g. gets T of a Nullable{T} type).
            </summary>
        </member>
        <member name="P:Namotion.Reflection.CachedType.IsNullableType">
            <summary>
            Gets a value indicating whether this type is wrapped with Nullable{T}.
            </summary>
        </member>
        <member name="P:Namotion.Reflection.CachedType.GenericArguments">
            <summary>
            Gets the type's generic arguments (Nullable{T} is unwrapped).
            </summary>
        </member>
        <member name="P:Namotion.Reflection.CachedType.OriginalGenericArguments">
            <summary>
            Gets the type's original generic arguments (Nullable{T} is not unwrapped).
            </summary>
        </member>
        <member name="P:Namotion.Reflection.CachedType.ElementType">
            <summary>
            Gets the type's element type (i.e. array type).
            </summary>
        </member>
        <member name="M:Namotion.Reflection.CachedType.ToString">
            <inheritdoc />
        </member>
        <member name="M:Namotion.Reflection.CachedType.GetCachedType(System.Type,System.Int32@)">
            <summary>Gets the cached type for the given type and nullable flags index.</summary>
            <param name="type">The type.</param>
            <param name="nullableFlagsIndex">The flags.</param>
            <returns>The cached type.</returns>
        </member>
        <member name="M:Namotion.Reflection.CachedType.UpdateOriginalGenericArguments">
            <summary>
            Updates the original generic arguments.
            </summary>
        </member>
        <member name="M:Namotion.Reflection.CachedType.GetCustomAttributes(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Namotion.Reflection.CachedType.GetCustomAttributes(System.Type,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Namotion.Reflection.CachedType.IsDefined(System.Type,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Namotion.Reflection.CachedType.Initialize(System.Int32@)">
            <summary>
            Updates the original generic arguments.
            </summary>
        </member>
        <member name="T:Namotion.Reflection.ContextualAccessorInfo">
            <summary>Base class for a contextual property or field.</summary>
        </member>
        <member name="P:Namotion.Reflection.ContextualAccessorInfo.AccessorType">
            <summary>
            Gets the accessor's type.
            </summary>
        </member>
        <member name="P:Namotion.Reflection.ContextualAccessorInfo.Nullability">
            <summary>
            Gets the nullability information of this accessor's type in the given context by unwrapping Nullable{T}.
            </summary>
        </member>
        <member name="M:Namotion.Reflection.ContextualAccessorInfo.GetValue(System.Object)">
            <summary>
            Returns the value of a field supported by a given object.
            </summary>
            <param name="obj">The object.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Namotion.Reflection.ContextualAccessorInfo.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value of the field supported by the given object.
            </summary>
            <param name="obj">The object.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Namotion.Reflection.ContextualFieldInfo">
            <summary>
            A field info with contextual information.
            </summary>
        </member>
        <member name="P:Namotion.Reflection.ContextualFieldInfo.FieldInfo">
            <summary>
            Gets the type context's field info.
            </summary>
        </member>
        <member name="P:Namotion.Reflection.ContextualFieldInfo.MemberInfo">
            <summary>
            Gets the type context's member info.
            </summary>
        </member>
        <member name="P:Namotion.Reflection.ContextualFieldInfo.AccessorType">
            <inheritdoc />
        </member>
        <member name="P:Namotion.Reflection.ContextualFieldInfo.FieldType">
            <summary>
            Gets the field's contextual type.
            </summary>
        </member>
        <member name="P:Namotion.Reflection.ContextualFieldInfo.Name">
            <summary>
            Gets the cached field name.
            </summary>
        </member>
        <member name="M:Namotion.Reflection.ContextualFieldInfo.GetValue(System.Object)">
            <summary>
            Returns the value of a field supported by a given object.
            </summary>
            <param name="obj">The object.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Namotion.Reflection.ContextualFieldInfo.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value of the field supported by the given object.
            </summary>
            <param name="obj">The object.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Namotion.Reflection.ContextualFieldInfo.GetCustomAttributes(System.Type,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Namotion.Reflection.ContextualFieldInfo.GetCustomAttributes(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Namotion.Reflection.ContextualFieldInfo.IsDefined(System.Type,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Namotion.Reflection.ContextualMemberInfo">
            <summary>
            A member info with contextual information.
            </summary>
        </member>
        <member name="P:Namotion.Reflection.ContextualMemberInfo.MemberInfo">
            <summary>
            Gets the type context's member info.
            </summary>
        </member>
        <member name="P:Namotion.Reflection.ContextualMemberInfo.Name">
            <summary>
            Gets the name of the cached member name (property or parameter name).
            </summary>
        </member>
        <member name="M:Namotion.Reflection.ContextualMemberInfo.ToString">
            <inheritdoc />
        </member>
        <member name="M:Namotion.Reflection.ContextualMemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Namotion.Reflection.ContextualMemberInfo.GetCustomAttributes(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Namotion.Reflection.ContextualMemberInfo.IsDefined(System.Type,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Namotion.Reflection.ContextualMethodInfo">
            <summary>
            A method info with contextual information.
            </summary>
        </member>
        <member name="P:Namotion.Reflection.ContextualMethodInfo.MethodInfo">
            <summary>
            Gets the type context's method info.
            </summary>
        </member>
        <member name="P:Namotion.Reflection.ContextualMethodInfo.Name">
            <summary>
            Gets the name of the cached method name.
            </summary>
        </member>
        <member name="P:Namotion.Reflection.ContextualMethodInfo.Parameters">
            <summary>
            Gets the contextual parameters.
            </summary>
        </member>
        <member name="P:Namotion.Reflection.ContextualMethodInfo.ReturnParameter">
            <summary>
            Gets the contextual return parameter.
            </summary>
        </member>
        <member name="P:Namotion.Reflection.ContextualMethodInfo.MemberInfo">
            <inheritdoc />
        </member>
        <member name="M:Namotion.Reflection.ContextualMethodInfo.ToString">
            <inheritdoc />
        </member>
        <member name="M:Namotion.Reflection.ContextualMethodInfo.GetCustomAttributes(System.Type,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Namotion.Reflection.ContextualMethodInfo.GetCustomAttributes(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Namotion.Reflection.ContextualMethodInfo.IsDefined(System.Type,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Namotion.Reflection.ContextualParameterInfo">
            <summary>
            A parameter info with contextual information.
            </summary>
        </member>
        <member name="P:Namotion.Reflection.ContextualParameterInfo.ParameterInfo">
            <summary>
            Gets the type context's parameter info.
            </summary>
        </member>
        <member name="P:Namotion.Reflection.ContextualParameterInfo.ParameterType">
            <summary>
            Gets the parameters contextual type.
            </summary>
        </member>
        <member name="P:Namotion.Reflection.ContextualParameterInfo.Nullability">
            <summary>
            Gets the nullability information of this parameter.
            </summary>
        </member>
        <member name="P:Namotion.Reflection.ContextualParameterInfo.Name">
            <summary>
            Gets the cached parameter name.
            </summary>
        </member>
        <member name="M:Namotion.Reflection.ContextualParameterInfo.ToString">
            <inheritdoc />
        </member>
        <member name="M:Namotion.Reflection.ContextualParameterInfo.GetCustomAttributes(System.Type,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Namotion.Reflection.ContextualParameterInfo.GetCustomAttributes(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Namotion.Reflection.ContextualParameterInfo.IsDefined(System.Type,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Namotion.Reflection.ContextualPropertyInfo">
            <summary>
            A property info with contextual information.
            </summary>
        </member>
        <member name="P:Namotion.Reflection.ContextualPropertyInfo.PropertyInfo">
            <summary>
            Gets the type context's property info.
            </summary>
        </member>
        <member name="P:Namotion.Reflection.ContextualPropertyInfo.AccessorType">
            <inheritdoc />
        </member>
        <member name="P:Namotion.Reflection.ContextualPropertyInfo.PropertyType">
            <summary>
            Gets the properties contextual type.
            </summary>
        </member>
        <member name="P:Namotion.Reflection.ContextualPropertyInfo.Name">
            <summary>
            Gets the cached field name.
            </summary>
        </member>
        <member name="P:Namotion.Reflection.ContextualPropertyInfo.MemberInfo">
            <summary>
            Gets the type context's member info.
            </summary>
        </member>
        <member name="P:Namotion.Reflection.ContextualPropertyInfo.CanWrite">
            <summary>
            Gets a value indicating whether the property can be written to.
            </summary>
        </member>
        <member name="P:Namotion.Reflection.ContextualPropertyInfo.CanRead">
            <summary>
            Gets a value indicating whether the property can be read from.
            </summary>
        </member>
        <member name="M:Namotion.Reflection.ContextualPropertyInfo.GetValue(System.Object)">
            <summary>
            Returns the value of a field supported by a given object.
            </summary>
            <param name="obj">The object.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Namotion.Reflection.ContextualPropertyInfo.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value of the field supported by the given object.
            </summary>
            <param name="obj">The object.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Namotion.Reflection.ContextualPropertyInfo.GetCustomAttributes(System.Type,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Namotion.Reflection.ContextualPropertyInfo.GetCustomAttributes(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Namotion.Reflection.ContextualPropertyInfo.IsDefined(System.Type,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Namotion.Reflection.ContextualType">
            <summary>
            A cached type with context information (e.g. parameter, field, property with nullability).
            </summary>
        </member>
        <member name="P:Namotion.Reflection.ContextualType.Context">
            <summary>
            Gets the context (property, field, parameter).
            </summary>
        </member>
        <member name="P:Namotion.Reflection.ContextualType.Parent">
            <summary>
            Gets the parent type with context.
            </summary>
        </member>
        <member name="P:Namotion.Reflection.ContextualType.OriginalNullability">
            <summary>
            Gets the original nullability information of this type in the given context (i.e. without unwrapping Nullable{T}).
            </summary>
        </member>
        <member name="P:Namotion.Reflection.ContextualType.GenericArguments">
            <summary>
            Gets the generic type arguments of the type in the given context (empty when unwrapped from Nullable{T}).
            </summary>
        </member>
        <member name="P:Namotion.Reflection.ContextualType.OriginalGenericArguments">
            <summary>
            Gets the original generic type arguments of the type in the given context.
            </summary>
        </member>
        <member name="P:Namotion.Reflection.ContextualType.ElementType">
            <summary>
            Gets the type's element type (i.e. array type).
            </summary>
        </member>
        <member name="P:Namotion.Reflection.ContextualType.EnumerableItemType">
            <summary>
            Gets the type's element type (i.e. array type).
            </summary>
        </member>
        <member name="P:Namotion.Reflection.ContextualType.BaseType">
            <summary>
            Gets the type's base type
            </summary>
        </member>
        <member name="P:Namotion.Reflection.ContextualType.Nullability">
            <summary>
            Gets the nullability information of this type in the given context by unwrapping Nullable{T} into account.
            </summary>
        </member>
        <member name="P:Namotion.Reflection.ContextualType.IsValueType">
            <summary>
            Gets a value indicating whether the System.Type is a value type.
            </summary>
        </member>
        <member name="P:Namotion.Reflection.ContextualType.Fields">
            <summary>
            Gets the contextual properties of this type.
            </summary>
        </member>
        <member name="P:Namotion.Reflection.ContextualType.Properties">
            <summary>
            Gets the contextual properties of this type.
            </summary>
        </member>
        <member name="P:Namotion.Reflection.ContextualType.Methods">
            <summary>
            Gets the contextual methods of this type (runtime).
            </summary>
        </member>
        <member name="M:Namotion.Reflection.ContextualType.GetProperty(System.String)">
            <summary>
            Gets a contextual property of the given contextual type (preserving the context).
            </summary>
            <param name="propertyName">The property name.</param>
            <returns>The contextual property or null.</returns>
        </member>
        <member name="M:Namotion.Reflection.ContextualType.GetField(System.String)">
            <summary>
            Gets a contextual field of the given contextual type (preserving the context).
            </summary>
            <param name="fieldName">The field name.</param>
            <returns>The contextual field or null.</returns>
        </member>
        <member name="M:Namotion.Reflection.ContextualType.ToString">
            <inheritdoc />
        </member>
        <member name="M:Namotion.Reflection.ContextualType.GetCachedType(System.Type,System.Int32@)">
            <summary>Gets the cached type for the given type and nullable flags index.</summary>
            <param name="type">The type.</param>
            <param name="nullableFlagsIndex">The flags.</param>
            <returns>The cached type.</returns>
        </member>
        <member name="T:Namotion.Reflection.ArrayExt">
            <summary>
            Helper to support old runtimes.
            </summary>
        </member>
        <member name="T:Namotion.Reflection.ContextualTypeExtensions">
            <summary>
            Type and member extension methods to extract contextual or cached types.
            </summary>
        </member>
        <member name="M:Namotion.Reflection.ContextualTypeExtensions.ToContextualType(System.Type)">
            <summary>
            Gets a <see cref="T:Namotion.Reflection.CachedType"/> for the given <see cref="T:System.Type"/> instance.
            </summary>
            <param name="type">The type.</param>
            <returns>The <see cref="T:Namotion.Reflection.CachedType"/>.</returns>
        </member>
        <member name="M:Namotion.Reflection.ContextualTypeExtensions.ToCachedType(System.Type)">
            <summary>
            Gets a <see cref="T:Namotion.Reflection.CachedType"/> for the given <see cref="T:System.Type"/> instance.
            </summary>
            <param name="type">The type.</param>
            <returns>The <see cref="T:Namotion.Reflection.CachedType"/>.</returns>
        </member>
        <member name="M:Namotion.Reflection.ContextualTypeExtensions.GetContextualAccessors(System.Type)">
            <summary>
            Gets an enumerable of <see cref="T:Namotion.Reflection.ContextualAccessorInfo"/>s (all properties and fields) for the given <see cref="T:System.Type"/> instance.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Namotion.Reflection.ContextualTypeExtensions.GetContextualProperties(System.Type)">
            <summary>
            Gets an array of <see cref="T:Namotion.Reflection.ContextualPropertyInfo"/> for the given <see cref="T:System.Type"/> instance.
            </summary>
            <param name="type">The type.</param>
            <returns>The runtime properties.</returns>
        </member>
        <member name="M:Namotion.Reflection.ContextualTypeExtensions.GetContextualFields(System.Type)">
            <summary>
            Gets an array of <see cref="T:Namotion.Reflection.ContextualFieldInfo"/> for the given <see cref="T:System.Type"/> instance.
            </summary>
            <param name="type">The type.</param>
            <returns>The runtime fields.</returns>
        </member>
        <member name="M:Namotion.Reflection.ContextualTypeExtensions.ToContextualType(System.Type,System.Collections.Generic.IEnumerable{System.Attribute})">
            <summary>
            Gets an uncached <see cref="T:Namotion.Reflection.ContextualType"/> for the given <see cref="T:System.Type"/> instance and attributes.
            </summary>
            <param name="type">The type.</param>
            <param name="attributes">The attributes.</param>
            <returns>The <see cref="T:Namotion.Reflection.CachedType"/>.</returns>
        </member>
        <member name="M:Namotion.Reflection.ContextualTypeExtensions.ToContextualParameter(System.Reflection.ParameterInfo)">
            <summary>
            Gets a <see cref="T:Namotion.Reflection.ContextualParameterInfo"/> for the given <see cref="T:System.Reflection.ParameterInfo"/> instance.
            Warning: Retrieving contextual information directly from <see cref="T:System.Reflection.ParameterInfo"/> might lose original context data (NRT on original generic type parameters).
            </summary>
            <param name="parameterInfo">The parameter info.</param>
            <returns>The <see cref="T:Namotion.Reflection.ContextualParameterInfo"/>.</returns>
        </member>
        <member name="M:Namotion.Reflection.ContextualTypeExtensions.ToContextualProperty(System.Reflection.PropertyInfo)">
            <summary>
            Gets a <see cref="T:Namotion.Reflection.ContextualPropertyInfo"/> for the given <see cref="T:System.Reflection.PropertyInfo"/> instance.
            Warning: Retrieving contextual information directly from <see cref="T:System.Reflection.PropertyInfo"/> might lose original context data (NRT on original generic type parameters).
            </summary>
            <param name="propertyInfo">The property info.</param>
            <returns>The <see cref="T:Namotion.Reflection.ContextualPropertyInfo"/>.</returns>
        </member>
        <member name="M:Namotion.Reflection.ContextualTypeExtensions.ToContextualField(System.Reflection.FieldInfo)">
            <summary>
            Gets a <see cref="T:Namotion.Reflection.ContextualFieldInfo"/> for the given <see cref="T:System.Reflection.FieldInfo"/> instance.
            Warning: Retrieving contextual information directly from <see cref="T:System.Reflection.FieldInfo"/> might lose original context data (NRT on original generic type parameters).
            </summary>
            <param name="fieldInfo">The field info.</param>
            <returns>The <see cref="T:Namotion.Reflection.ContextualFieldInfo"/>.</returns>
        </member>
        <member name="M:Namotion.Reflection.ContextualTypeExtensions.ToContextualAccessor(System.Reflection.MemberInfo)">
            <summary>
            Gets a <see cref="T:Namotion.Reflection.ContextualMemberInfo"/> for the given <see cref="T:System.Reflection.MemberInfo"/> instance.
            Warning: Retrieving contextual information directly from <see cref="T:System.Reflection.MemberInfo"/> might lose original context data (NRT on original generic type parameters).
            </summary>
            <param name="memberInfo">The member info.</param>
            <returns>The <see cref="T:Namotion.Reflection.ContextualMemberInfo"/>.</returns>
        </member>
        <member name="T:Namotion.Reflection.Nullability">
            <summary>
            Specifies the nullability in the given context.
            </summary>
        </member>
        <member name="F:Namotion.Reflection.Nullability.Unknown">
            <summary>
            Nullability is unknown (NRT is not enabled).
            </summary>
        </member>
        <member name="F:Namotion.Reflection.Nullability.NotNullable">
            <summary>
            Reference type is not nullable.
            </summary>
        </member>
        <member name="F:Namotion.Reflection.Nullability.Nullable">
            <summary>
            Reference type can be null.
            </summary>
        </member>
        <member name="T:Namotion.Reflection.EnumerableExtensions">
            <summary>
            IEnumerable extensions.
            </summary>
        </member>
        <member name="M:Namotion.Reflection.EnumerableExtensions.GetAssignableToTypeName``1(System.Collections.Generic.IEnumerable{``0},System.String,Namotion.Reflection.TypeNameStyle)">
            <summary>Tries to get the first object which is assignable to the given type name.</summary>
            <param name="objects">The objects.</param>
            <param name="typeName">Type of the attribute.</param>
            <param name="typeNameStyle">The type name style.</param>
            <returns>The objects which are assignable.</returns>
        </member>
        <member name="M:Namotion.Reflection.EnumerableExtensions.FirstAssignableToTypeNameOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.String,Namotion.Reflection.TypeNameStyle)">
            <summary>Tries to get the first object which is assignable to the given type name.</summary>
            <param name="objects">The objects.</param>
            <param name="typeName">Type of the attribute.</param>
            <param name="typeNameStyle">The type name style.</param>
            <returns>May return null (not found).</returns>
        </member>
        <member name="M:Namotion.Reflection.EnumerableExtensions.GetCommonBaseType(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>Finds the first common base type of the given types.</summary>
            <param name="types">The types.</param>
            <returns>The common base type.</returns>
        </member>
        <member name="T:Namotion.Reflection.Infrastructure.DynamicApis">
            <summary>Provides dynamic access to framework APIs.</summary>
        </member>
        <member name="F:Namotion.Reflection.Infrastructure.DynamicApis.SupportsFileApis">
            <summary>Gets a value indicating whether file APIs are available.</summary>
        </member>
        <member name="F:Namotion.Reflection.Infrastructure.DynamicApis.SupportsPathApis">
            <summary>Gets a value indicating whether path APIs are available.</summary>
        </member>
        <member name="F:Namotion.Reflection.Infrastructure.DynamicApis.SupportsDirectoryApis">
            <summary>Gets a value indicating whether path APIs are available.</summary>
        </member>
        <member name="F:Namotion.Reflection.Infrastructure.DynamicApis.SupportsXPathApis">
            <summary>Gets a value indicating whether XPath APIs are available.</summary>
        </member>
        <member name="M:Namotion.Reflection.Infrastructure.DynamicApis.DirectoryGetCurrentDirectory">
            <summary>Gets the current working directory.</summary>
            <returns>The directory path.</returns>
            <exception cref="T:System.NotSupportedException">The System.IO.Directory API is not available on this platform.</exception>
        </member>
        <member name="M:Namotion.Reflection.Infrastructure.DynamicApis.FileExists(System.String)">
            <summary>Checks whether a file exists.</summary>
            <param name="filePath">The file path.</param>
            <returns>true or false</returns>
            <exception cref="T:System.NotSupportedException">The System.IO.File API is not available on this platform.</exception>
        </member>
        <member name="M:Namotion.Reflection.Infrastructure.DynamicApis.FileReadAllText(System.String)">
            <summary>Read a file.</summary>
            <param name="filePath">The file path.</param>
            <returns>The file content.</returns>
            <exception cref="T:System.NotSupportedException">The System.IO.File API is not available on this platform.</exception>
        </member>
        <member name="M:Namotion.Reflection.Infrastructure.DynamicApis.DirectoryExists(System.String)">
            <summary>Checks whether a directory exists.</summary>
            <param name="directoryPath">The directory path.</param>
            <returns>true or false</returns>
            <exception cref="T:System.NotSupportedException">The System.IO.File API is not available on this platform.</exception>
        </member>
        <member name="M:Namotion.Reflection.Infrastructure.DynamicApis.DirectoryGetAllFiles(System.String,System.String)">
            <summary>Gets all files of directory and its sub-directories.</summary>
            <param name="path">The directory path.</param>
            <param name="searchPattern">The search pattern.</param>
            <returns>true or false</returns>
            <exception cref="T:System.NotSupportedException">The System.IO.Directory API is not available on this platform.</exception>
        </member>
        <member name="M:Namotion.Reflection.Infrastructure.DynamicApis.DirectoryGetFiles(System.String,System.String)">
            <summary>Gets all files of directory.</summary>
            <param name="path">The directory path.</param>
            <param name="searchPattern">The search pattern.</param>
            <returns>true or false</returns>
            <exception cref="T:System.NotSupportedException">The System.IO.Directory API is not available on this platform.</exception>
        </member>
        <member name="M:Namotion.Reflection.Infrastructure.DynamicApis.PathCombine(System.String,System.String)">
            <summary>Combines two paths.</summary>
            <param name="path1">The path1.</param>
            <param name="path2">The path2.</param>
            <returns>The combined path.</returns>
            <exception cref="T:System.NotSupportedException">The System.IO.Path API is not available on this platform.</exception>
        </member>
        <member name="M:Namotion.Reflection.Infrastructure.DynamicApis.PathGetDirectoryName(System.String)">
            <summary>Gets the directory path of a file path.</summary>
            <param name="filePath">The file path.</param>
            <returns>The directory name.</returns>
            <exception cref="T:System.NotSupportedException">The System.IO.Path API is not available on this platform.</exception>
        </member>
        <member name="M:Namotion.Reflection.Infrastructure.DynamicApis.XPathEvaluate(System.Xml.Linq.XDocument,System.String)">
            <summary>Evaluates the XPath for a given XML document.</summary>
            <param name="document">The document.</param>
            <param name="path">The path.</param>
            <returns>The value.</returns>
            <exception cref="T:System.NotSupportedException">The System.Xml.XPath.Extensions API is not available on this platform.</exception>
        </member>
        <member name="T:Namotion.Reflection.ObjectExtensions">
            <summary>
            Object extensions.
            </summary>
        </member>
        <member name="M:Namotion.Reflection.ObjectExtensions.HasProperty(System.Object,System.String)">
            <summary>Determines whether the specified property name exists.</summary>
            <param name="obj">The object.</param>
            <param name="propertyName">Name of the property.</param>
            <returns><c>true</c> if the property exists; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Namotion.Reflection.ObjectExtensions.TryGetPropertyValue``1(System.Object,System.String,``0)">
            <summary>Determines whether the specified property name exists.</summary>
            <param name="obj">The object.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="defaultValue">The default value if the property does not exist.</param>
            <returns>The property or the default value.</returns>
        </member>
        <member name="P:Namotion.Reflection.ObjectExtensions.DisableNullabilityValidation">
            <summary>
            Gets or sets a value indicating whether to disable nullability validation completely (global).
            </summary>
        </member>
        <member name="M:Namotion.Reflection.ObjectExtensions.HasValidNullability(System.Object,System.Boolean)">
            <summary>Checks whether the object has valid non nullable properties.</summary>
            <param name="obj">The object.</param>
            <param name="checkChildren">Specifies whether to also recursively check children.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Namotion.Reflection.ObjectExtensions.EnsureValidNullability(System.Object,System.Boolean)">
            <summary>Checks whether the object has valid non nullable properties.</summary>
            <param name="obj">The object.</param>
            <param name="checkChildren">Specifies whether to also recursively check children.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Namotion.Reflection.ObjectExtensions.ValidateNullability(System.Object,System.Boolean)">
            <summary>Checks which non nullable properties are null (invalid).</summary>
            <param name="obj">The object.</param>
            <param name="checkChildren">Specifies whether to also recursively check children.</param>
            <returns>The result.</returns>
        </member>
        <member name="T:Namotion.Reflection.CachingXDocument">
            <summary>
            Caching layer hiding the details of accessing DLL documentation.
            </summary>
        </member>
        <member name="T:Namotion.Reflection.StringBuilderExtensions">
            <summary>
            Contains extension for <see cref="T:System.Text.StringBuilder"/>.
            </summary>
        </member>
        <member name="M:Namotion.Reflection.StringBuilderExtensions.Append(System.Text.StringBuilder,System.String[])">
            <summary>
            Allows to append multiple strings to the <see cref="T:System.Text.StringBuilder"/> at once.
            </summary>
            <remarks>
            Only strings that are neither <c>null</c> nor <c>string.Empty</c> will be added.
            </remarks>
            <param name="stringBuilder">The instance of <see cref="T:System.Text.StringBuilder"/>.</param>
            <param name="values">The values to appends.</param>
            <returns>The value of <paramref name="stringBuilder"/>.</returns>
        </member>
        <member name="M:Namotion.Reflection.StringBuilderExtensions.Append(System.Text.StringBuilder,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Allows to append multiple strings to the <see cref="T:System.Text.StringBuilder"/> at once.
            </summary>
            <remarks>
            Only strings that are neither <c>null</c> nor <c>string.Empty</c> will be added.
            </remarks>
            <param name="stringBuilder">The instance of <see cref="T:System.Text.StringBuilder"/>.</param>
            <param name="value1">First value to append.</param>
            <param name="value2">Second value to append.</param>
            <param name="value3">Third value to append. (optional)</param>
            <param name="value4">Fourth value to append. (optional)</param>
            <param name="value5">Fifth value to append. (optional)</param>
            <param name="value6">Sixth value to append. (optional)</param>
            <returns>The value of <paramref name="stringBuilder"/>.</returns>
        </member>
        <member name="T:Namotion.Reflection.TypeExtensions">
            <summary>Provides extension methods for reflection.</summary>
        </member>
        <member name="M:Namotion.Reflection.TypeExtensions.IsAssignableToTypeName(Namotion.Reflection.CachedType,System.String,Namotion.Reflection.TypeNameStyle)">
            <summary>Checks whether the given type is assignable to the given type name.</summary>
            <param name="type">The type.</param>
            <param name="typeName">Name of the type.</param>
            <param name="typeNameStyle">The type name style.</param>
            <returns></returns>
        </member>
        <member name="M:Namotion.Reflection.TypeExtensions.IsAssignableToTypeName(System.Type,System.String,Namotion.Reflection.TypeNameStyle)">
            <summary>Checks whether the given type is assignable to the given type name.</summary>
            <param name="type">The type.</param>
            <param name="typeName">Name of the type.</param>
            <param name="typeNameStyle">The type name style.</param>
            <returns></returns>
        </member>
        <member name="M:Namotion.Reflection.TypeExtensions.InheritsFromTypeName(System.Type,System.String,Namotion.Reflection.TypeNameStyle)">
            <summary>Checks whether the given type inherits from the given type name.</summary>
            <param name="type">The type.</param>
            <param name="typeName">Name of the type.</param>
            <param name="typeNameStyle">The type name style.</param>
            <returns>true if the type inherits from typeName.</returns>
        </member>
        <member name="M:Namotion.Reflection.TypeExtensions.GetEnumerableItemType(System.Type)">
            <summary>Gets the type of the array item.</summary>
        </member>
        <member name="M:Namotion.Reflection.TypeExtensions.GetGenericTypeArgumentsOfTypeOrBaseTypes(System.Type)">
            <summary>Gets the generic type arguments of a type or its base type.</summary>
            <param name="type">The type.</param>
            <returns>The type arguments.</returns>
        </member>
        <member name="M:Namotion.Reflection.TypeExtensions.GetDisplayName(System.Type)">
            <summary>Gets a human readable type name (e.g. DictionaryOfStringAndObject).</summary>
            <param name="type">The type.</param>
            <returns>The type name.</returns>
        </member>
        <member name="T:Namotion.Reflection.TypeNameStyle">
            <summary>The type name style.</summary>
        </member>
        <member name="F:Namotion.Reflection.TypeNameStyle.Name">
            <summary>Only the name of the type.</summary>
        </member>
        <member name="F:Namotion.Reflection.TypeNameStyle.FullName">
            <summary>The full name of the type including the namespace.</summary>
        </member>
        <member name="T:Namotion.Reflection.XmlDocs">
            <summary>Provides extension methods for reading XML comments from reflected members.</summary>
        </member>
        <member name="M:Namotion.Reflection.XmlDocs.ClearCache">
            <summary>
            Clears the cache.
            </summary>
        </member>
        <member name="T:Namotion.Reflection.XmlDocsExtensions">
            <summary>Provides extension methods for reading XML comments from reflected members.</summary>
        </member>
        <member name="M:Namotion.Reflection.XmlDocsExtensions.GetXmlDocsSummary(Namotion.Reflection.CachedType,Namotion.Reflection.XmlDocsOptions)">
            <summary>Returns the contents of the "summary" XML documentation tag for the specified member.</summary>
            <param name="type">The type.</param>
            <param name="options">The XML docs reading and formatting options.</param>
            <returns>The contents of the "summary" tag for the member.</returns>
        </member>
        <member name="M:Namotion.Reflection.XmlDocsExtensions.GetXmlDocsRemarks(Namotion.Reflection.CachedType,Namotion.Reflection.XmlDocsOptions)">
            <summary>Returns the contents of the "remarks" XML documentation tag for the specified member.</summary>
            <param name="type">The type.</param>
            <param name="options">The XML docs reading and formatting options.</param>
            <returns>The contents of the "summary" tag for the member.</returns>
        </member>
        <member name="M:Namotion.Reflection.XmlDocsExtensions.GetXmlDocsTag(Namotion.Reflection.CachedType,System.String,Namotion.Reflection.XmlDocsOptions)">
            <summary>Returns the contents of an XML documentation tag for the specified member.</summary>
            <param name="type">The type.</param>
            <param name="tagName">Name of the tag.</param>
            <param name="options">The XML docs reading and formatting options.</param>
            <returns>The contents of the "summary" tag for the member.</returns>
        </member>
        <member name="M:Namotion.Reflection.XmlDocsExtensions.GetXmlDocsSummary(Namotion.Reflection.ContextualMemberInfo,Namotion.Reflection.XmlDocsOptions)">
            <summary>Returns the contents of the "summary" XML documentation tag for the specified member.</summary>
            <param name="member">The reflected member.</param>
            <param name="options">The XML docs reading and formatting options.</param>
            <returns>The contents of the "summary" tag for the member.</returns>
        </member>
        <member name="M:Namotion.Reflection.XmlDocsExtensions.GetXmlDocsRemarks(Namotion.Reflection.ContextualMemberInfo,Namotion.Reflection.XmlDocsOptions)">
            <summary>Returns the contents of the "remarks" XML documentation tag for the specified member.</summary>
            <param name="member">The reflected member.</param>
            <param name="options">The XML docs reading and formatting options.</param>
            <returns>The contents of the "summary" tag for the member.</returns>
        </member>
        <member name="M:Namotion.Reflection.XmlDocsExtensions.GetXmlDocsTag(Namotion.Reflection.ContextualMemberInfo,System.String,Namotion.Reflection.XmlDocsOptions)">
            <summary>Returns the contents of an XML documentation tag for the specified member.</summary>
            <param name="member">The reflected member.</param>
            <param name="tagName">Name of the tag.</param>
            <param name="options">The XML docs reading and formatting options.</param>
            <returns>The contents of the "summary" tag for the member.</returns>
        </member>
        <member name="M:Namotion.Reflection.XmlDocsExtensions.GetXmlDocs(Namotion.Reflection.ContextualParameterInfo,Namotion.Reflection.XmlDocsOptions)">
            <summary>Returns the contents of the "returns" or "param" XML documentation tag for the specified parameter.</summary>
            <param name="parameter">The reflected parameter or return info.</param>
            <param name="options">The XML docs reading and formatting options.</param>
            <returns>The contents of the "returns" or "param" tag.</returns>
        </member>
        <member name="M:Namotion.Reflection.XmlDocsExtensions.GetXmlDocsSummary(System.Type,Namotion.Reflection.XmlDocsOptions)">
            <summary>Returns the contents of the "summary" XML documentation tag for the specified member.</summary>
            <param name="type">The type.</param>
            <param name="options">The XML docs reading and formatting options.</param>
            <returns>The contents of the "summary" tag for the member.</returns>
        </member>
        <member name="M:Namotion.Reflection.XmlDocsExtensions.GetXmlDocsRemarks(System.Type,Namotion.Reflection.XmlDocsOptions)">
            <summary>Returns the contents of the "remarks" XML documentation tag for the specified member.</summary>
            <param name="type">The type.</param>
            <param name="options">The XML docs reading and formatting options.</param>
            <returns>The contents of the "summary" tag for the member.</returns>
        </member>
        <member name="M:Namotion.Reflection.XmlDocsExtensions.GetXmlDocsTag(System.Type,System.String,Namotion.Reflection.XmlDocsOptions)">
            <summary>Returns the contents of an XML documentation tag for the specified member.</summary>
            <param name="type">The type.</param>
            <param name="tagName">Name of the tag.</param>
            <param name="options">The XML docs reading and formatting options.</param>
            <returns>The contents of the "summary" tag for the member.</returns>
        </member>
        <member name="M:Namotion.Reflection.XmlDocsExtensions.GetXmlDocsSummary(System.Reflection.MemberInfo,Namotion.Reflection.XmlDocsOptions)">
            <summary>Returns the contents of the "summary" XML documentation tag for the specified member.</summary>
            <param name="member">The reflected member.</param>
            <param name="options">The XML docs reading and formatting options.</param>
            <returns>The contents of the "summary" tag for the member.</returns>
        </member>
        <member name="M:Namotion.Reflection.XmlDocsExtensions.GetXmlDocsRemarks(System.Reflection.MemberInfo,Namotion.Reflection.XmlDocsOptions)">
            <summary>Returns the contents of the "remarks" XML documentation tag for the specified member.</summary>
            <param name="member">The reflected member.</param>
            <param name="options">The XML docs reading and formatting options.</param>
            <returns>The contents of the "summary" tag for the member.</returns>
        </member>
        <member name="M:Namotion.Reflection.XmlDocsExtensions.GetXmlDocsElement(System.Reflection.MemberInfo,Namotion.Reflection.XmlDocsOptions)">
            <summary>Returns the contents of an XML documentation tag for the specified member.</summary>
            <param name="member">The reflected member.</param>
            <param name="options">The XML docs reading and formatting options.</param>
            <returns>The contents of the "summary" tag for the member.</returns>
        </member>
        <member name="M:Namotion.Reflection.XmlDocsExtensions.GetXmlDocsElement(System.Reflection.MemberInfo,System.String,Namotion.Reflection.XmlDocsOptions)">
            <summary>Returns the contents of the "summary" XML documentation tag for the specified member.</summary>
            <param name="member">The reflected member.</param>
            <param name="pathToXmlFile">The path to the XML documentation file.</param>
            <param name="options">The XML docs reading and formatting options.</param>
            <returns>The contents of the "summary" tag for the member.</returns>
        </member>
        <member name="M:Namotion.Reflection.XmlDocsExtensions.GetXmlDocsTag(System.Reflection.MemberInfo,System.String,Namotion.Reflection.XmlDocsOptions)">
            <summary>Returns the contents of an XML documentation tag for the specified member.</summary>
            <param name="member">The reflected member.</param>
            <param name="tagName">Name of the tag.</param>
            <param name="options">The XML docs reading and formatting options.</param>
            <returns>The contents of the "summary" tag for the member.</returns>
        </member>
        <member name="M:Namotion.Reflection.XmlDocsExtensions.GetXmlDocsRecordPropertySummary(System.Reflection.PropertyInfo,Namotion.Reflection.XmlDocsOptions)">
            <summary>Returns the property summary of a Record type which is read from the param tag on the type.</summary>
            <param name="member">The reflected member.</param>
            <param name="options">The XML docs reading and formatting options.</param>
            <returns>The contents of the "param" tag of the Record property.</returns>
        </member>
        <member name="M:Namotion.Reflection.XmlDocsExtensions.GetXmlDocs(System.Reflection.ParameterInfo,Namotion.Reflection.XmlDocsOptions)">
            <summary>Returns the contents of the "returns" or "param" XML documentation tag for the specified parameter.</summary>
            <param name="parameter">The reflected parameter or return info.</param>
            <param name="options">The XML docs reading and formatting options.</param>
            <returns>The contents of the "returns" or "param" tag.</returns>
        </member>
        <member name="M:Namotion.Reflection.XmlDocsExtensions.GetXmlDocsElement(System.Reflection.ParameterInfo,System.String,Namotion.Reflection.XmlDocsOptions)">
            <summary>Returns the contents of the "returns" or "param" XML documentation tag for the specified parameter.</summary>
            <param name="parameter">The reflected parameter or return info.</param>
            <param name="pathToXmlFile">The path to the XML documentation file.</param>
            <param name="options">The XML docs reading and formatting options.</param>
            <returns>The contents of the "returns" or "param" tag.</returns>
        </member>
        <member name="M:Namotion.Reflection.XmlDocsExtensions.ToXmlDocsContent(System.Xml.Linq.XElement,Namotion.Reflection.XmlDocsOptions)">
            <summary>Converts the given XML documentation <see cref="T:System.Xml.Linq.XElement"/> to text.</summary>
            <param name="element">The XML element.</param>
            <param name="options">The XML docs reading and formatting options.</param>
            <returns>The text</returns>
        </member>
        <member name="M:Namotion.Reflection.XmlDocsExtensions.GetMemberElementName(System.Object)">
            <exception cref="T:System.ArgumentException">Unknown member type.</exception>
        </member>
        <member name="M:Namotion.Reflection.XmlDocsExtensions.GetXmlDocsPath(System.Reflection.Assembly,Namotion.Reflection.XmlDocsOptions)">
            <summary>
            Gets the file path to the XML docs for the given assembly.
            </summary>
            <param name="assembly">The assembly.</param>
            <param name="options">The XML docs reading and formatting options.</param>
            <returns>The file path or null if not found.</returns>
        </member>
        <member name="M:Namotion.Reflection.XmlDocsExtensions.ProcessInheritDocTypeElements(System.Reflection.MemberInfo,System.Xml.Linq.XElement,Namotion.Reflection.XmlDocsOptions)">
            <summary>
            Get Type from a referencing string such as <c>!:MyType</c> or <c>!:MyType.MyProperty</c>
            </summary>
        </member>
        <member name="T:Namotion.Reflection.XmlDocsFormatting">
            <summary>
            Contains the logic to maintain formatting of XML-doc elements.
            </summary>
        </member>
        <member name="M:Namotion.Reflection.XmlDocsFormatting.AppendFormattedElement(System.Text.StringBuilder,System.Xml.Linq.XElement,Namotion.Reflection.XmlDocsFormattingMode)">
            <summary>
            Appends the value of <paramref name="element"/> to the <paramref name="stringBuilder"/> respecting
            <paramref name="formattingMode"/> to generate additional formatting information.
            </summary>
            <param name="stringBuilder">The current <see cref="T:System.Text.StringBuilder"/>.</param>
            <param name="element">The <see cref="T:System.Xml.Linq.XElement"/> to append.</param>
            <param name="formattingMode">The <see cref="T:Namotion.Reflection.XmlDocsFormattingMode"/> for generating additional formatting tags.</param>
            <returns>The passed in <paramref name="stringBuilder"/>.</returns>
        </member>
        <member name="M:Namotion.Reflection.XmlDocsFormatting.AppendUnformattedElement(System.Text.StringBuilder,System.Xml.Linq.XElement)">
            <summary>
            Appends the value of <paramref name="element"/> without any formatting information.
            </summary>
            <param name="stringBuilder">The current <see cref="T:System.Text.StringBuilder"/>.</param>
            <param name="element">The <see cref="T:System.Xml.Linq.XElement"/> to append.</param>
            <returns>The value of <paramref name="stringBuilder"/>.</returns>
        </member>
        <member name="M:Namotion.Reflection.XmlDocsFormatting.AppendHtmlFormattedElement(System.Text.StringBuilder,System.Xml.Linq.XElement)">
            <summary>
            Appends the value of <paramref name="element"/> surrounded by the neccessary HTML-tags to maintain its formatting information (if supported).
            </summary>
            <param name="stringBuilder">The current <see cref="T:System.Text.StringBuilder"/>.</param>
            <param name="element">The <see cref="T:System.Xml.Linq.XElement"/> to append.</param>
            <returns>The value of <paramref name="stringBuilder"/>.</returns>
        </member>
        <member name="M:Namotion.Reflection.XmlDocsFormatting.AppendMarkdownFormattedElement(System.Text.StringBuilder,System.Xml.Linq.XElement)">
            <summary>
            Appends the value of <paramref name="element"/> surrounded by the neccessary Markdown-tags to maintain its formatting information (if supported).
            </summary>
            <param name="stringBuilder">The current <see cref="T:System.Text.StringBuilder"/>.</param>
            <param name="element">The <see cref="T:System.Xml.Linq.XElement"/> to append.</param>
            <returns>The value of <paramref name="stringBuilder"/>.</returns>
        </member>
        <member name="M:Namotion.Reflection.XmlDocsFormatting.AppendMapFormattedElement(System.Text.StringBuilder,System.Xml.Linq.XElement,System.Collections.Generic.Dictionary{System.String,System.Func{System.Text.StringBuilder,System.Xml.Linq.XElement,System.Text.StringBuilder}})">
            <summary>
            Appends the value of <paramref name="element"/> surrounded by the tags specified in <paramref name="map"/> (if supported).
            </summary>
            <param name="stringBuilder">The current <see cref="T:System.Text.StringBuilder"/>.</param>
            <param name="element">The <see cref="T:System.Xml.Linq.XElement"/> to append.</param>
            <param name="map">Map of formatting tags.</param>
            <returns>The value of <paramref name="stringBuilder"/>.</returns>
        </member>
        <member name="M:Namotion.Reflection.XmlDocsFormatting.AppendSimpleTaggedElement(System.Text.StringBuilder,System.Xml.Linq.XElement,System.String,System.String)">
            <summary>
            Appends the value of <paramref name="element"/> surrounded by <paramref name="startTag"/> and <paramref name="endTag"/>
            to maintain its formatting information (if supported).
            </summary>
            <param name="stringBuilder">The current <see cref="T:System.Text.StringBuilder"/>.</param>
            <param name="element">The <see cref="T:System.Xml.Linq.XElement"/> to append.</param>
            <param name="startTag">The start-tag.</param>
            <param name="endTag">The end-tag.</param>
            <returns>The value of <paramref name="stringBuilder"/>.</returns>
        </member>
        <member name="T:Namotion.Reflection.XmlDocsFormattingMode">
            <summary>
            Contains the formatting modes supported.
            </summary>
        </member>
        <member name="F:Namotion.Reflection.XmlDocsFormattingMode.None">
            <summary>
            Doesn't use any formatting.
            </summary>
        </member>
        <member name="F:Namotion.Reflection.XmlDocsFormattingMode.Html">
            <summary>
            Maintains formatting through HTML-tags.
            </summary>
        </member>
        <member name="F:Namotion.Reflection.XmlDocsFormattingMode.Markdown">
            <summary>
            Maintains formatting through Markdown-tags.
            </summary>
        </member>
        <member name="T:Namotion.Reflection.XmlDocsKeys">
            <summary>
            Contains constants for element and attribute names use in XML-docs.
            </summary>
        </member>
        <member name="F:Namotion.Reflection.XmlDocsKeys.SummaryElement">
            <summary>
            Name of the summary element.
            </summary>
        </member>
        <member name="F:Namotion.Reflection.XmlDocsKeys.RemarksElement">
            <summary>
            Name of the remarks element.
            </summary>
        </member>
        <member name="F:Namotion.Reflection.XmlDocsKeys.ParamElement">
            <summary>
            Name of the param element.
            </summary>
        </member>
        <member name="F:Namotion.Reflection.XmlDocsKeys.ParamNameAttribute">
            <summary>
            Name of the name attribute used in conjunction with the <see cref="F:Namotion.Reflection.XmlDocsKeys.ParamElement"/>.
            </summary>
        </member>
        <member name="F:Namotion.Reflection.XmlDocsKeys.ParamRefElement">
            <summary>
            Name of the paramref element.
            </summary>
        </member>
        <member name="F:Namotion.Reflection.XmlDocsKeys.ParamRefNameAttribute">
            <summary>
            Name of the name attribute used in conjunction with the <see cref="F:Namotion.Reflection.XmlDocsKeys.ParamRefElement"/>.
            </summary>
        </member>
        <member name="F:Namotion.Reflection.XmlDocsKeys.SeeElement">
            <summary>
            Name of the see element.
            </summary>
        </member>
        <member name="F:Namotion.Reflection.XmlDocsKeys.SeeLangwordAttribute">
            <summary>
            Name of the langword attribute used in conjunction with the <see cref="F:Namotion.Reflection.XmlDocsKeys.SeeElement"/>.
            </summary>
        </member>
        <member name="F:Namotion.Reflection.XmlDocsKeys.SeeCrefAttribute">
            <summary>
            Name of the cref attribute used in conjunction with the <see cref="F:Namotion.Reflection.XmlDocsKeys.SeeElement"/>.
            </summary>
        </member>
        <member name="F:Namotion.Reflection.XmlDocsKeys.SeeHrefAttribute">
            <summary>
            Name of the href attribute used in conjunction with the <see cref="F:Namotion.Reflection.XmlDocsKeys.SeeElement"/>.
            </summary>
        </member>
        <member name="F:Namotion.Reflection.XmlDocsKeys.ReturnsElement">
            <summary>
            Name of the returns element.
            </summary>
        </member>
        <member name="F:Namotion.Reflection.XmlDocsKeys.InheritDocElement">
            <summary>
            Name of the inheritdoc element.
            </summary>
        </member>
        <member name="T:Namotion.Reflection.XmlDocsOptions">
            <summary>
            Contains all options to control generation of XML-docs.
            </summary>
        </member>
        <member name="P:Namotion.Reflection.XmlDocsOptions.Default">
            <summary>
            The default options.
            </summary>
        </member>
        <member name="P:Namotion.Reflection.XmlDocsOptions.ResolveExternalXmlDocs">
            <summary>
            Specifies whether tho resolve the XML Docs from the NuGet cache or .NET SDK directory.
            </summary>
        </member>
        <member name="P:Namotion.Reflection.XmlDocsOptions.FormattingMode">
            <summary>
            Specifies how formatting tags should be processed.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute">
            <summary>
            Indicates the type of the async method builder that should be used by a language compiler to
            build the attributed async method or to build the attributed type when used as the return type
            of an async method.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute.#ctor(System.Type)">
            <summary>Initializes the <see cref="T:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute"/>.</summary>
            <param name="builderType">The <see cref="T:System.Type"/> of the associated builder.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute.BuilderType">
            <summary>Gets the <see cref="T:System.Type"/> of the associated builder.</summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute">
            <summary>
            An attribute that allows parameters to receive the expression of other parameters.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute"/> class.
            </summary>
            <param name="parameterName">The condition parameter value.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.ParameterName">
            <summary>
            Gets the parameter name the expression is retrieved from.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute">
            <summary>
            Indicates that compiler support for a particular feature is required for the location where this attribute is applied.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute"/> type.
            </summary>
            <param name="featureName">The name of the feature to indicate.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName">
            <summary>
            The name of the compiler feature.
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.IsOptional">
            <summary>
            If true, the compiler can choose to allow access to the location where this attribute is applied if it does not understand <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/>.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RefStructs">
            <summary>
            The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the ref structs C# feature.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RequiredMembers">
            <summary>
            The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the required members C# feature.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute">
            <summary>
            Indicates which arguments to a method involving an interpolated string handler should be passed to that handler.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute"/> class.
            </summary>
            <param name="argument">The name of the argument that should be passed to the handler.</param>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute"/> class.
            </summary>
            <param name="arguments">The names of the arguments that should be passed to the handler.</param>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="P:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.Arguments">
            <summary>
            Gets the names of the arguments that should be passed to the handler.
            </summary>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterpolatedStringHandlerAttribute">
            <summary>
            Indicates the attributed type is to be used as an interpolated string handler.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ModuleInitializerAttribute">
             <summary>
             Used to indicate to the compiler that a method should be called
             in its containing module's initializer.
             </summary>
             <remarks>
             When one or more valid methods
             with this attribute are found in a compilation, the compiler will
             emit a module initializer which calls each of the attributed methods.
            
             Certain requirements are imposed on any method targeted with this attribute:
             - The method must be `static`.
             - The method must be an ordinary member method, as opposed to a property accessor, constructor, local function, etc.
             - The method must be parameterless.
             - The method must return `void`.
             - The method must not be generic or be contained in a generic type.
             - The method's effective accessibility must be `internal` or `public`.
            
             The specification for module initializers in the .NET runtime can be found here:
             https://github.com/dotnet/runtime/blob/main/docs/design/specs/Ecma-335-Augments.md#module-initializer
             </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.RequiredMemberAttribute">
            <summary>
            Specifies that a type has required members or that a member is required.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.SkipLocalsInitAttribute">
            <summary>
            Used to indicate to the compiler that the <c>.locals init</c> flag should not be set in method headers.
            </summary>
        </member>
        <member name="M:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute"/> class.
            </summary>
        </member>
        <member name="M:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute"/> class with the specified message.
            </summary>
            <param name="message">An optional message associated with this attribute instance.</param>
        </member>
        <member name="P:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.Message">
            <summary>
            Returns the optional message associated with this attribute instance.
            </summary>
        </member>
        <member name="P:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.Url">
            <summary>
            Returns the optional URL associated with this attribute instance.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>
            Specifies that null is allowed as an input even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>
            Specifies that null is disallowed as an input even if the corresponding type allows it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>
            Applied to a method that will never return under any circumstance.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>
            Specifies that the method will not return if the associated Boolean parameter is passed the specified value.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes the attribute with the specified parameter value.
            </summary>
            <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable
            by diagnostics if the argument to the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>
            Gets the condition parameter value.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>
            Specifies that an output may be null even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>
            Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue"/>, the parameter may be null even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes the attribute with the specified return value condition.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter may be null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>
            Gets the return value condition.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>
            Specifies that the method or property will ensure that the listed field and property members have not-null values.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>
            Initializes the attribute with a field or property member.
            </summary>
            <param name="member">The field or property member that is promised to be not-null.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>
            Initializes the attribute with the list of field and property members.
            </summary>
            <param name="members">The list of field and property members that are promised to be not-null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>
            Gets field or property member names.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>
            Specifies that the method or property will ensure that the listed field and property
            members have not-null values when returning with the specified return value condition.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>
            Initializes the attribute with the specified return value condition and a field or property member.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter will not be null.</param>
            <param name="member">The field or property member that is promised to be not-null.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>
            Initializes the attribute with the specified return value condition and list of field and property members.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter will not be null.</param>
            <param name="members">The list of field and property members that are promised to be not-null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>
            Gets the return value condition.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>
            Gets field or property member names.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>
            Specifies that an output will not be null even if the corresponding type allows it.
            Specifies that an input argument was not null when the call returns.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>
            Specifies that the output will be non-null if the named parameter is non-null.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>
            Initializes the attribute with the associated parameter name.
            </summary>
            <param name="parameterName">The associated parameter name. The output will be non-null if the argument to the parameter specified is non-null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>
            Gets the associated parameter name.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>
            Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>, the parameter will not be null even if the corresponding type allows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes the attribute with the specified return value condition.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter will not be null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute">
            <summary>
            Specifies that this constructor sets all required members for the current type,
            and callers do not need to set any required members themselves.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute">
            <summary>
            Specifies the syntax used in a string.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String)">
            <summary>
            Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> with the identifier of the syntax used.
            </summary>
            <param name="syntax">The syntax identifier.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String,System.Object[])">
            <summary>Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> with the identifier of the syntax used.</summary>
            <param name="syntax">The syntax identifier.</param>
            <param name="arguments">Optional arguments associated with the specific syntax employed.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Syntax">
            <summary>Gets the identifier of the syntax used.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Arguments">
            <summary>Optional arguments associated with the specific syntax employed.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.CompositeFormat">
            <summary>The syntax identifier for strings containing composite formats for string formatting.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateOnlyFormat">
            <summary>The syntax identifier for strings containing date format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateTimeFormat">
            <summary>The syntax identifier for strings containing date and time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.EnumFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Enum"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.GuidFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Guid"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Json">
            <summary>The syntax identifier for strings containing JavaScript Object Notation (JSON).</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.NumericFormat">
            <summary>The syntax identifier for strings containing numeric format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Regex">
            <summary>The syntax identifier for strings containing regular expressions.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeOnlyFormat">
            <summary>The syntax identifier for strings containing time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeSpanFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.TimeSpan"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Uri">
            <summary>The syntax identifier for strings containing URIs.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Xml">
            <summary>The syntax identifier for strings containing XML.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.UnscopedRefAttribute">
            <summary>
            Used to indicate a byref escapes and is not scoped.
            </summary>
            <remarks>
            <para>
            There are several cases where the C# compiler treats a <see langword="ref"/> as implicitly
            <see langword="scoped"/> - where the compiler does not allow the <see langword="ref"/> to escape the method.
            </para>
            <para>
            For example:
            <list type="number">
                <item><see langword="this"/> for <see langword="struct"/> instance methods.</item>
                <item><see langword="ref"/> parameters that refer to <see langword="ref"/> <see langword="struct"/> types.</item>
                <item><see langword="out"/> parameters.</item>
            </list>
            </para>
            <para>
            This attribute is used in those instances where the <see langword="ref"/> should be allowed to escape.
            </para>
            <para>
            Applying this attribute, in any form, has impact on consumers of the applicable API. It is necessary for
            API authors to understand the lifetime implications of applying this attribute and how it may impact their users.
            </para>
            </remarks>
        </member>
        <member name="T:System.Index">
            <summary>Represent a type can be used to index a collection either from the start or the end.</summary>
            <remarks>
            Index is used by the C# compiler to support the new index syntax
            <code>
            int[] someArray = new int[5] { 1, 2, 3, 4, 5 } ;
            int lastElement = someArray[^1]; // lastElement = 5
            </code>
            </remarks>
        </member>
        <member name="M:System.Index.#ctor(System.Int32,System.Boolean)">
            <summary>Construct an Index using a value and indicating if the index is from the start or from the end.</summary>
            <param name="value">The index value. it has to be zero or positive number.</param>
            <param name="fromEnd">Indicating if the index is from the start or from the end.</param>
            <remarks>
            If the Index constructed from the end, index value 1 means pointing at the last element and index value 0 means pointing at beyond last element.
            </remarks>
        </member>
        <member name="P:System.Index.Start">
            <summary>Create an Index pointing at first element.</summary>
        </member>
        <member name="P:System.Index.End">
            <summary>Create an Index pointing at beyond last element.</summary>
        </member>
        <member name="M:System.Index.FromStart(System.Int32)">
            <summary>Create an Index from the start at the position indicated by the value.</summary>
            <param name="value">The index value from the start.</param>
        </member>
        <member name="M:System.Index.FromEnd(System.Int32)">
            <summary>Create an Index from the end at the position indicated by the value.</summary>
            <param name="value">The index value from the end.</param>
        </member>
        <member name="P:System.Index.Value">
            <summary>Returns the index value.</summary>
        </member>
        <member name="P:System.Index.IsFromEnd">
            <summary>Indicates whether the index is from the start or the end.</summary>
        </member>
        <member name="M:System.Index.GetOffset(System.Int32)">
            <summary>Calculate the offset from the start using the giving collection length.</summary>
            <param name="length">The length of the collection that the Index will be used with. length has to be a positive value</param>
            <remarks>
            For performance reason, we don't validate the input length parameter and the returned offset value against negative values.
            we don't validate either the returned offset is greater than the input length.
            It is expected Index will be used with collections which always have non negative length/count. If the returned offset is negative and
            then used to index a collection will get out of range exception which will be same affect as the validation.
            </remarks>
        </member>
        <member name="M:System.Index.Equals(System.Object)">
            <summary>Indicates whether the current Index object is equal to another object of the same type.</summary>
            <param name="value">An object to compare with this object</param>
        </member>
        <member name="M:System.Index.Equals(System.Index)">
            <summary>Indicates whether the current Index object is equal to another Index object.</summary>
            <param name="other">An object to compare with this object</param>
        </member>
        <member name="M:System.Index.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
        </member>
        <member name="M:System.Index.op_Implicit(System.Int32)~System.Index">
            <summary>Converts integer number to an Index.</summary>
        </member>
        <member name="M:System.Index.ToString">
            <summary>Converts the value of the current Index object to its equivalent string representation.</summary>
        </member>
    </members>
</doc>
